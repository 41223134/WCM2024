<h1>About</h1>
<p>網頁: <a href="https://41223134.github.io/wcm2024">https://41223134.github.io/wcm2024</a></p>
<p>網誌: <a href="https://41223134.github.io/wcm2024/blog">https://41223134.github.io/wcm2024/blog</a></p>
<p>簡報: <a href="https://41223134.github.io/wcm2024/reveal">https://41223134.github.io/wcm2024/reveal</a></p>
<p>倉儲: <a href="https://github.com/41223134/wcm2024">https://github.com/41223134/wcm2024</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Codespaces</h1>
<p><a href="http://41223134.github.io/wcm2024">https://41223134.github.io/wcm2024</a></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<h1>w3</h1>
<h1>w6</h1>
<p><strong>從與ChatGPT的對話認識Git</strong></p>
<p><span style="background-color: #ccffff;"><strong>問題一:Git 的發展歷史</strong></span></p>
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="assistant" data-message-id="cb5d2eec-a10a-419c-911e-c80de7525d9e" dir="auto">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>Git 是一個分散式版本控制系統，由林納斯·托瓦茲（Linus Torvalds）在2005年創建。這是為了幫助管理 Linux 內核開發而開發的。以下是 Git 的發展歷史：</p>
<ol>
<li>
<p><strong>2005 年</strong>：林納斯·托瓦茲創建了 Git。他最初是為了解決 Linux 內核開發過程中遇到的版本控制問題而創建的。Git 的設計目標是速度、數據完整性和分布式性。</p>
</li>
<li>
<p><strong>2005 年 4 月</strong>：Git 開始在 Linux 內核開發中使用。</p>
</li>
<li>
<p><strong>2005 年 7 月</strong>：Git 1.0 版本發布，正式公開發布。</p>
</li>
<li>
<p><strong>2008 年</strong>：GitHub 成立。GitHub 是一個基於 Git 的代碼託管平台，它大大推動了 Git 的普及和使用。</p>
</li>
<li>
<p><strong>2013 年</strong>：Git 2.0 版本發布。這是一個重要的版本，引入了一些重大變化和改進，包括重新設計的子模組命令和優化的日誌顯示。</p>
</li>
<li>
<p><strong>2016 年</strong>：Git 2.10 版本發布。這個版本包括了對 Windows 平台的改進和增強，以及其他一些改進。</p>
</li>
<li>
<p><strong>2018 年</strong>：Git 2.19 版本發布。這個版本引入了一些重要的性能改進和安全改進，並修復了一些漏洞。</p>
</li>
<li>
<p><strong>2020 年</strong>：Git 2.26 版本發布。這個版本引入了一個新的條件配置項，使得 Git 在某些情況下更加靈活。</p>
</li>
<li>
<p><strong>2021 年</strong>：Git 2.32 版本發布。這個版本包括了一些新特性、改進和修復。</p>
</li>
</ol>
<p>Git 自發布以來一直在不斷發展，成為了最流行的版本控制系統之一，被廣泛應用於軟體開發領域。</p>
<p><span style="background-color: #ccffff;"><strong>問題二:git創作人的相關履歷</strong></span></p>
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="assistant" data-message-id="df4d2ddc-b0d7-411b-8bd4-66f28ee794b5" dir="auto">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>Git 的創作人是林納斯·托瓦茲（Linus Torvalds），他是著名的芬蘭計算機科學家和軟體工程師。以下是他的一些相關履歷：</p>
<ol>
<li>
<p><strong>Linux 內核</strong>：林納斯·托瓦茲最著名的貢獻是 Linux 操作系統的創建。在 1991 年，當時還是赫爾辛基大學的學生時，他開始編寫 Linux 內核，並將其作為開源項目發布。他的這一舉動奠定了現代開源運動的基礎，並成為了後來許多開源專案的靈感來源。</p>
</li>
<li>
<p><strong>Git 版本控制系統</strong>：林納斯·托瓦茲在 2005 年創建了 Git，這是一個分散式版本控制系統，最初是為了解決 Linux 內核開發中的版本管理問題。Git 的成功使他成為了開源社區的領袖之一，並為他贏得了廣泛的讚譽和尊重。</p>
</li>
<li>
<p><strong>開源領袖</strong>：由於他在 Linux 和 Git 項目中的領導地位和卓越貢獻，林納斯·托瓦茲被認為是開源運動的重要人物之一。他的工作促進了開源軟體的發展和普及，並為全球開發者社區帶來了無數的機會和收益。</p>
</li>
<li>
<p><strong>獎項和榮譽</strong>：由於他在計算機科學和開源社區的貢獻，林納斯·托瓦茲贏得了許多獎項和榮譽，包括 ACM 軟體系統獎、IEEE 計算機學會編程語言成就獎等。</p>
</li>
</ol>
<p>總的來說，林納斯·托瓦茲是一位極具影響力的計算機科學家和開源社區的領袖，他的創作和貢獻對整個軟體行業產生了深遠的影響。</p>
<p><span style="background-color: #ccffff;"><strong>問題三:能如何運用git解決solidworks製圖相關問題</strong></span></p>
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="assistant" data-message-id="2bd619ad-2041-4561-8269-9663c73225ba" dir="auto">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>Git 是一個優秀的版本控制系統，雖然它最初是針對軟體開發的，但也可以應用於其他領域，包括工程和製造。SolidWorks 是一款流行的電腦輔助設計（CAD）軟體，用於製造業中的產品設計和工程。以下是一些如何運用 Git 解決 SolidWorks 製圖相關問題的建議：</p>
<ol>
<li>
<p><strong>版本控制</strong>：SolidWorks 專案通常包含多個檔案，包括零件文件、組裝文件和圖紙文件等。使用 Git 可以將這些文件存儲在一個統一的存儲庫中，並跟踪它們的歷史版本。這使得團隊成員可以方便地共享、查看和回溯到不同版本的設計。</p>
</li>
<li>
<p><strong>協作</strong>：多人協作是設計工程中的常見需求。使用 Git，團隊成員可以同時在不同的分支上工作，每個人可以獨立地進行修改和測試，然後將其合併回主分支中。這樣可以減少衝突，提高團隊的效率。</p>
</li>
<li>
<p><strong>分支管理</strong>：SolidWorks 項目可能包含多個不同的分支，例如開發分支、功能分支、修復分支等。使用 Git 可以輕鬆地管理這些分支，並在需要時進行合併或切換。</p>
</li>
<li>
<p><strong>備份和復原</strong>：SolidWorks 文件可能會遇到意外的損壞或錯誤，使用 Git 可以定期備份文件並輕鬆地恢復到之前的版本。這樣可以保護設計文件免受意外損失的影響。</p>
</li>
<li>
<p><strong>代碼審查</strong>：Git 提供了強大的代碼審查功能，團隊成員可以在提交代碼之前輕鬆地進行審查和討論。這有助於提高代碼的質量和可靠性。</p>
</li>
</ol>
<p>總的來說，雖然 Git 不是專門針對 SolidWorks 製圖的工具，但它提供了一個有效的方式來管理和協作設計文件，並可以解決許多與版本控制和團隊協作相關的問題。</p>
<p><span style="background-color: #ccffff;"><strong>問題四:要在 Windows 實際 demo git client 與 git server, 該如何進行?</strong></span></p>
<p>要在 Windows 上實際進行 Git 客戶端（client）和 Git 伺服器（server）的演示，您需要以下步驟：</p>
<ul>
<li>
<p><strong>安裝 Git：</strong></p>
<ul>
<li>首先，您需要在 Windows 上安裝 Git。您可以從 Git 官方網站（<a href="https://git-scm.com/%EF%BC%89%E4%B8%8B%E8%BC%89" target="_new">https://git-scm.com/）下載</a> Git 的安裝程式。</li>
<li>下載後運行安裝程式，按照提示進行安裝。在安裝過程中，您可以選擇安裝 Git Bash（一個在 Windows 上運行的命令行界面）和 Git GUI（圖形用戶界面）等組件。</li>
</ul>
</li>
<li>
<p><strong>設置 Git 用戶名和郵箱：</strong></p>
<ul>
<li>安裝完成後，在命令行中打開 Git Bash。</li>
<li>使用以下命令設置您的 Git 用戶名和郵箱：</li>
<li>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"</pre>
</li>
</ul>
</li>
</ul>
<p><span style="background-color: #ccffff;"></span></p>
<ul>
<li>
<p><strong>設置 Git 伺服器：</strong></p>
<ul>
<li>您可以在 Windows 上設置本地 Git 伺服器，以進行演示。最簡單的方法是使用 Git 的內建伺服器。</li>
<li>在命令行中，進入您想要共享的存儲庫所在的目錄，然後執行以下命令來初始化一個空的 Git 存儲庫：</li>
<li>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git init --bare server-repo.git</pre>
</li>
<li>這將在您的當前目錄中創建一個名為 <code>server-repo.git</code> 的空存儲庫。</li>
</ul>
</li>
<li>
<p><strong>設置 Git 客戶端：</strong></p>
<ul>
<li>在 Windows 上，您可以使用 Git GUI 或命令行界面來操作 Git 客戶端。您可以在任何想要工作的目錄中初始化一個新的存儲庫，或者將現有的存儲庫克隆到本地。</li>
<li>使用 Git Bash 或其他命令行工具，進入您想要初始化或克隆存儲庫的目錄，然後執行以下命令：
<div class="dark bg-gray-950 rounded-md">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md">
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git clone /path/to/your/server-repo.git</pre>
</div>
</div>
</li>
<li>這將在您的當前目錄中創建一個名為 <code>server-repo</code> 的目錄，並將伺服器上的存儲庫克隆到本地。</li>
</ul>
</li>
</ul>
<p></p>
<ul>
<li>
<p><strong>進行演示：</strong></p>
<ul>
<li>現在，您可以在本地存儲庫中進行任何 Git 操作，例如添加文件<span style="color: #ff0000;"><code>git add</code></span>、提交更改<span style="color: #ff0000;"><code>git commit</code></span>、推送到伺服器<span style="color: #ff0000;"><code>git push</code></span>、將更新拉取到本地<span style="color: #ff0000;"><code>git pull</code></span>等。</li>
<li>您可以使用 Git GUI 或命令行工具來進行這些操作，並觀察其在 Git 伺服器上的效果。</li>
</ul>
</li>
</ul>
<p>通過以上步驟，您可以在 Windows 上演示 Git 客戶端和伺服器的基本操作，以及它們之間的交互作用。</p>
<p><span style="background-color: #ccffff;"></span></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h1>課程期中整理</h1>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>