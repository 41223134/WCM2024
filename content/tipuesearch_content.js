var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:  https://41223134.github.io/wcm2024 \n 網誌:  https://41223134.github.io/wcm2024/blog \n 簡報:  https://41223134.github.io/wcm2024/reveal \n 倉儲:\xa0 https://github.com/41223134/wcm2024 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Codespaces', 'text': 'https://41223134.github.io/wcm2024 \n', 'tags': '', 'url': 'Codespaces.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'w3', 'text': '', 'tags': '', 'url': 'w3.html'}, {'title': 'w6', 'text': '從與ChatGPT的對話認識Git \n 問題一:Git 的發展歷史 \n \n \n \n Git 是一個分散式版本控制系統，由林納斯·托瓦茲（Linus Torvalds）在2005年創建。這是為了幫助管理 Linux 內核開發而開發的。以下是 Git 的發展歷史： \n \n \n 2005 年 ：林納斯·托瓦茲創建了 Git。他最初是為了解決 Linux 內核開發過程中遇到的版本控制問題而創建的。Git 的設計目標是速度、數據完整性和分布式性。 \n \n \n 2005 年 4 月 ：Git 開始在 Linux 內核開發中使用。 \n \n \n 2005 年 7 月 ：Git 1.0 版本發布，正式公開發布。 \n \n \n 2008 年 ：GitHub 成立。GitHub 是一個基於 Git 的代碼託管平台，它大大推動了 Git 的普及和使用。 \n \n \n 2013 年 ：Git 2.0 版本發布。這是一個重要的版本，引入了一些重大變化和改進，包括重新設計的子模組命令和優化的日誌顯示。 \n \n \n 2016 年 ：Git 2.10 版本發布。這個版本包括了對 Windows 平台的改進和增強，以及其他一些改進。 \n \n \n 2018 年 ：Git 2.19 版本發布。這個版本引入了一些重要的性能改進和安全改進，並修復了一些漏洞。 \n \n \n 2020 年 ：Git 2.26 版本發布。這個版本引入了一個新的條件配置項，使得 Git 在某些情況下更加靈活。 \n \n \n 2021 年 ：Git 2.32 版本發布。這個版本包括了一些新特性、改進和修復。 \n \n \n Git 自發布以來一直在不斷發展，成為了最流行的版本控制系統之一，被廣泛應用於軟體開發領域。 \n 問題二:git創作人的相關履歷 \n \n \n \n Git 的創作人是林納斯·托瓦茲（Linus Torvalds），他是著名的芬蘭計算機科學家和軟體工程師。以下是他的一些相關履歷： \n \n \n Linux 內核 ：林納斯·托瓦茲最著名的貢獻是 Linux 操作系統的創建。在 1991 年，當時還是赫爾辛基大學的學生時，他開始編寫 Linux 內核，並將其作為開源項目發布。他的這一舉動奠定了現代開源運動的基礎，並成為了後來許多開源專案的靈感來源。 \n \n \n Git 版本控制系統 ：林納斯·托瓦茲在 2005 年創建了 Git，這是一個分散式版本控制系統，最初是為了解決 Linux 內核開發中的版本管理問題。Git 的成功使他成為了開源社區的領袖之一，並為他贏得了廣泛的讚譽和尊重。 \n \n \n 開源領袖 ：由於他在 Linux 和 Git 項目中的領導地位和卓越貢獻，林納斯·托瓦茲被認為是開源運動的重要人物之一。他的工作促進了開源軟體的發展和普及，並為全球開發者社區帶來了無數的機會和收益。 \n \n \n 獎項和榮譽 ：由於他在計算機科學和開源社區的貢獻，林納斯·托瓦茲贏得了許多獎項和榮譽，包括 ACM 軟體系統獎、IEEE 計算機學會編程語言成就獎等。 \n \n \n 總的來說，林納斯·托瓦茲是一位極具影響力的計算機科學家和開源社區的領袖，他的創作和貢獻對整個軟體行業產生了深遠的影響。 \n 問題三:能如何運用git解決solidworks製圖相關問題 \n \n \n \n Git 是一個優秀的版本控制系統，雖然它最初是針對軟體開發的，但也可以應用於其他領域，包括工程和製造。SolidWorks 是一款流行的電腦輔助設計（CAD）軟體，用於製造業中的產品設計和工程。以下是一些如何運用 Git 解決 SolidWorks 製圖相關問題的建議： \n \n \n 版本控制 ：SolidWorks 專案通常包含多個檔案，包括零件文件、組裝文件和圖紙文件等。使用 Git 可以將這些文件存儲在一個統一的存儲庫中，並跟踪它們的歷史版本。這使得團隊成員可以方便地共享、查看和回溯到不同版本的設計。 \n \n \n 協作 ：多人協作是設計工程中的常見需求。使用 Git，團隊成員可以同時在不同的分支上工作，每個人可以獨立地進行修改和測試，然後將其合併回主分支中。這樣可以減少衝突，提高團隊的效率。 \n \n \n 分支管理 ：SolidWorks 項目可能包含多個不同的分支，例如開發分支、功能分支、修復分支等。使用 Git 可以輕鬆地管理這些分支，並在需要時進行合併或切換。 \n \n \n 備份和復原 ：SolidWorks 文件可能會遇到意外的損壞或錯誤，使用 Git 可以定期備份文件並輕鬆地恢復到之前的版本。這樣可以保護設計文件免受意外損失的影響。 \n \n \n 代碼審查 ：Git 提供了強大的代碼審查功能，團隊成員可以在提交代碼之前輕鬆地進行審查和討論。這有助於提高代碼的質量和可靠性。 \n \n \n 總的來說，雖然 Git 不是專門針對 SolidWorks 製圖的工具，但它提供了一個有效的方式來管理和協作設計文件，並可以解決許多與版本控制和團隊協作相關的問題。 \n 問題四:要在 Windows 實際 demo git client 與 git server, 該如何進行? \n 要在 Windows 上實際進行 Git 客戶端（client）和 Git 伺服器（server）的演示，您需要以下步驟： \n \n \n 安裝 Git： \n \n 首先，您需要在 Windows 上安裝 Git。您可以從 Git 官方網站（ https://git-scm.com/）下載  Git 的安裝程式。 \n 下載後運行安裝程式，按照提示進行安裝。在安裝過程中，您可以選擇安裝 Git Bash（一個在 Windows 上運行的命令行界面）和 Git GUI（圖形用戶界面）等組件。 \n \n \n \n 設置 Git 用戶名和郵箱： \n \n 安裝完成後，在命令行中打開 Git Bash。 \n 使用以下命令設置您的 Git 用戶名和郵箱： \n \n git config --global user.name "Your Name"\ngit config --global user.email "your.email@example.com" \n \n \n \n \n \n \n \n 設置 Git 伺服器： \n \n 您可以在 Windows 上設置本地 Git 伺服器，以進行演示。最簡單的方法是使用 Git 的內建伺服器。 \n 在命令行中，進入您想要共享的存儲庫所在的目錄，然後執行以下命令來初始化一個空的 Git 存儲庫： \n \n git init --bare server-repo.git \n \n 這將在您的當前目錄中創建一個名為  server-repo.git  的空存儲庫。 \n \n \n \n 設置 Git 客戶端： \n \n 在 Windows 上，您可以使用 Git GUI 或命令行界面來操作 Git 客戶端。您可以在任何想要工作的目錄中初始化一個新的存儲庫，或者將現有的存儲庫克隆到本地。 \n 使用 Git Bash 或其他命令行工具，進入您想要初始化或克隆存儲庫的目錄，然後執行以下命令：\n \n \n git clone /path/to/your/server-repo.git \n \n \n \n 這將在您的當前目錄中創建一個名為  server-repo  的目錄，並將伺服器上的存儲庫克隆到本地。 \n \n \n \n \n \n \n 進行演示： \n \n 現在，您可以在本地存儲庫中進行任何 Git 操作，例如添加文件 git add 、提交更改 git commit 、推送到伺服器 git push 、將更新拉取到本地 git pull 等。 \n 您可以使用 Git GUI 或命令行工具來進行這些操作，並觀察其在 Git 伺服器上的效果。 \n \n \n \n 通過以上步驟，您可以在 Windows 上演示 Git 客戶端和伺服器的基本操作，以及它們之間的交互作用。 \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w6.html'}, {'title': '課程期中整理', 'text': '', 'tags': '', 'url': '課程期中整理.html'}, {'title': '網頁式內容管理', 'text': 'Q1:如何建立 Github 上的網站?Q2:如何管理內容?Q3: 如何建立章節式網站?Q4:能放入什麼多媒體內容?Q5:靜態圖文?Q6:動態圖文?Q7:線上遊戲?Q8:3D 零組件展示?Q9:如何建立網頁系統中的網誌?Q10:如何建立網頁系統中的簡報? \n A1: 1. 建立 GitHub 儲存庫 \n \n 登入 GitHub。 \n 點擊右上角的 “+” 按鈕，選擇 “New repository”。 \n 儲存庫名稱輸入  <username>.github.io （將  <username>  替換為你的 GitHub 使用者名稱）。 \n 設置為 public，然後點擊 “Create repository”。 \n \n 2. 添加網站檔案 \n \n 在本地電腦上克隆剛剛建立的儲存庫。 \n 進入儲存庫目錄。 \n 建立一個  index.html  文件，並添加你的網站內容，如簡單的 HTML 頁面。 \n 提交並推送更改到 GitHub。 \n \n 3. 啟用 GitHub Pages \n \n 進入你的 GitHub 儲存庫頁面。 \n 點擊儲存庫設定（Settings）。 \n 滾動到 “GitHub Pages” 部分。 \n 在 “Source” 下拉選單中選擇  main  分支，然後點擊 “Save” \n 通過  https://<username>.github.io  進入網站。 \n \n A2: 1. 直接編輯文件 \n \n 在 GitHub 網站上編輯：進入儲存庫，選擇文件，點擊鉛筆圖標編輯，提交更改。 \n 在本地編輯：在本地編輯文件，使用 Git 提交並推送更改。 \n \n 2. 使用 Jekyll \n \n 安裝 Jekyll，在本地建立新網站，添加內容到  _posts  目錄，配置  _config.yml ，推送到 GitHub 儲存庫。 \n \n 3. 使用 GitHub Actions \n \n 在儲存庫中建立  .github/workflows  目錄，添加工作流文件（如  deploy.yml ），設置自動化流程。 \n \n 4. 使用靜態網站 CMS \n \n Netlify CMS：設置 Netlify CMS，集成到 GitHub 儲存庫，通過其界面管理和編輯內容。 \n \n A3: 可以使用靜態網站生成器，如Replit、Codespaces或Gitpods等。首先，需要選擇一個適合你需求的生成器，然後在本地開發環境中創建你的網站再使用生成器提供的模板和功能來創建不同的章節和內容頁面，組織你的網站內容。完成編輯後，使用生成器將網站生成為靜態文件，然後將這些文件推送到GitHub存儲庫中。最後，你的章節式網站將通過GitHub Pages或其他靜態網站托管服務進行部署，讓其他人可以訪問和瀏覽你的網站。 \n A4: 1. 圖片: 將圖片文件上傳到你的儲存庫中，然後在需要的地方使用  <img>  標籤嵌入圖片。 \n 2. 影片: 將影片文件上傳到你的儲存庫中，然後使用  <video>  標籤或嵌入視頻平台（如 YouTube）的視頻鏈接。 \n 3. 音頻: 將音頻文件上傳到你的儲存庫中，然後使用  <audio>  標籤播放音樂或音訊。 \n 4. 文件下載: 將需要提供的文件上傳到你的儲存庫中，然後添加下載鏈接到網站的相應位置。 \n 5. 互動地圖: 使用地圖服務提供的嵌入代碼（如 Google 地圖的嵌入代碼）在網站中嵌入互動地圖。 \n 6. 網站嵌入: 嵌入其他網站或工具，例如在網站中嵌入 Twitter 貼文或 GitHub Gists。 \n A5: 1. 文字 \n \n 在 markdown 文件中直接添加文字內容，使用標題（ # ）、段落、列表等 Markdown 語法進行排版。 \n 使用 HTML 標籤（如  <h1> 、 <p> 、 <ul>  等）來定製更複雜的文本排版。 \n \n 2. 圖片 \n \n 將圖片文件上傳到你的 GitHub 儲存庫中，然後在 markdown 文件中使用 Markdown 語法或 HTML 標籤添加圖片。 \n 例如，在 markdown 文件中使用  ![Alt text](path/to/image.jpg)  或在 HTML 中使用  <img src="path/to/image.jpg" alt="Alt text">  來添加圖片。 \n \n A6: 1. GIF 圖片 \n \n 將 GIF 圖片文件上傳到你的 GitHub 儲存庫中，然後在 markdown 文件中使用 Markdown 語法或 HTML 標籤添加 GIF 圖片。 \n 例如，在 markdown 文件中使用  ![Alt text](path/to/image.gif)  或在 HTML 中使用  <img src="path/to/image.gif" alt="Alt text">  來添加 GIF 圖片。 \n \n 2. 動態文本效果 \n \n 使用 CSS 或 JavaScript 創建動態的文本效果，例如文字的漸變色、動態顯示、動畫效果等。 \n 你可以將這些效果添加到 HTML 或 CSS 文件中，然後將這些文件上傳到你的 GitHub 儲存庫中，並在你的網站中引入這些文件。 \n \n 3. JavaScript 動畫 \n \n 使用 JavaScript 創建動畫效果，例如滾動效果、彈出效果、視差滾動等。 \n 你可以將 JavaScript 代碼添加到 HTML 文件中，然後將文件上傳到你的 GitHub 儲存庫中，並在你的網站中引入這些文件。 \n \n A7: 嵌入 HTML5 遊戲 \n 如果你有一個 HTML5 遊戲的代碼，你可以將其嵌入到你的網站中。通常，HTML5 遊戲的代碼會包含在一個 HTML 文件中，你可以將這個文件和相關的資源文件（如 JavaScript 和 CSS 文件）上傳到你的 GitHub 儲存庫中，然後在你的網站中引入這些文件。 \n 嵌入其他網頁遊戲 \n 如果你想嵌入其他網頁上的遊戲，你可以使用  <iframe>  標籤將遊戲頁面嵌入到你的網站中。只需將遊戲頁面的 URL 放入  <iframe>  標籤的  src  屬性中即可。 \n A8:  1.使用Javascript 3D庫: 使用像Three.js這樣的JavaScript 3D庫，可以輕鬆在網站中展示3D零組件。你可以將3D模型導入到你的網站中，並使用Three.js等庫來渲染和顯示它們。這樣的庫通常提供了各種功能，如照明、動畫、交互等，以增強3D模型的表現力。 \n 2.使用網頁GL視窗: 利用WebGL技術，你可以在網頁中嵌入可交互的3D場景。這需要一些較高級的編程知識，但它可以讓你在網頁中直接渲染3D模型，使它們能夠與用戶互動。 \n 3.嵌入式3D查看器: 使用嵌入式3D查看器，如Sketchfab，可以將3D模型嵌入到你的網站中。Sketchfab提供了一個簡單的嵌入代碼，你可以將它添加到你的網站中，以便在線上展示和互動3D模型。 \n A9: 1. 選擇網誌平台或系統 \n \n 自建網誌 ：你可以使用 WordPress、Jekyll、Hugo 等網誌平台或靜態網站生成器自建網誌。 \n 使用網誌平台 ：例如 Blogger、Medium、WordPress.com 等提供的網誌服務。 \n \n 2. 設計和建立網誌 \n \n 選擇一個適合的網誌佈局和風格。 \n 添加網誌所需的功能，如文章分類、標籤、評論系統等。 \n \n 3. 撰寫和發佈文章 \n \n 撰寫你的網誌文章，包括內容、圖片、視頻等。 \n 使用選定的網誌平台或系統發佈文章，並設置適當的分類和標籤。 \n \n 4. 宣傳你的網誌 \n \n 分享你的文章到社交媒體平台，增加曝光度。 \n 與其他網誌作者合作，互相宣傳。 \n \n 5. 管理和更新 \n \n 定期更新你的網誌，保持活躍和吸引力。 \n 回應讀者的評論，與他們建立互動。 \n \n A10: 1 . 選擇簡報工具 ：像是 PowerPoint、Google 幻燈片或 Keynote 這樣的工具都可以。 \n 2. 設計簡報 ：挑選適合你主題的模板，並按照你的需求設計簡報的外觀。 \n 3. 添加內容 ：插入你想要展示的文字、圖片、圖表等內容。 \n 4. 設定簡報流程 ：按照順序組織你的內容，確保簡報的邏輯清晰。 \n 5. 測試 ：在發布前確保簡報中沒有任何錯誤或格式問題。 \n', 'tags': '', 'url': '網頁式內容管理.html'}, {'title': 'Python 程式系統', 'text': 'Q1:如何利用電腦輔助設計室的舊 Python 建立新的可攜環境? Q2:在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域? (精密)機械設計流程? 設計運算? 特定系統模擬? \n A1: 1.虛擬環境（Virtual Environment）：  使用 Python 的虛擬環境工具，如  venv  或  virtualenv ，來創建一個獨立的 Python 環境。這個環境將具有自己的 Python 解釋器和套件庫，不會影響到系統中的其他 Python 安裝。 \n 2.容器化技術（Containerization）：  使用容器化技術，如 Docker，來創建一個獨立的 Python 環境。你可以在容器中安裝所需的 Python 版本和套件，並將這個容器映像部署到不同的系統中運行，而不會影響到主機系統。 \n \n A2: 1. 精密機械設計流程： \xa0 \xa0\xa0  使用 JavaScript 和 HTML 構建互動式的網頁介面，讓使用者能夠輸入參數和條件。 \xa0 \xa0\xa0 使用 Python 處理這些輸入，進行精密機械設計的計算和模擬。 \xa0 \xa0\xa0 將計算結果顯示在網頁上，並提供交互式功能，讓使用者調整參數並觀察結果。 2. 設計運算： \xa0\xa0\xa0 使用 JavaScript 和 HTML 構建計算機或運算工具的網頁介面，讓使用者輸入數據和計算需求。 \xa0\xa0\xa0 使用 Python 處理這些輸入，進行複雜的設計運算，如結構設計、優化問題等。 \xa0 \xa0 將計算結果呈現在網頁上，並提供可視化和交互式功能，讓使用者理解和分析結果。 3. 特定系統模擬： \xa0 \xa0 使用 JavaScript 和 HTML 構建模擬系統的網頁介面，模擬特定物理或工程系統的行為。 \xa0 \xa0 使用 Python 編寫模擬算法和數據處理腳本，以模擬系統的動態行為。 \xa0\xa0\xa0 通過在網頁上顯示模擬結果和提供交互式操作，讓使用者探索系統的行為和性能。 綜合利用 Python、JavaScript 和 HTML 技術，你可以在網頁中實現許多高級功能和應用，包括複雜的設計計算、精密的模擬以及交互式的使用者界面。這些應用可以應用於工程、科學、教育等各個領域，為使用者提供豐富的網頁體驗和強大的功能。', 'tags': '', 'url': 'Python 程式系統.html'}, {'title': '網頁上的 IDE', 'text': 'Q1:IDE 是甚麼? Q2:可以將 Replit、Codespaces 與 Gitpod 當成 IDE 用來開發各種程式嗎? Q3:與近端操作系統上的開發有何不同? Q4:多人協同? Q5:這樣安全嗎? \n 學習議題: 學會使用網頁上的各種 IDE 之後, 有沒有甚麼感想或心得?', 'tags': '', 'url': '網頁上的 IDE.html'}, {'title': 'AI 工具', 'text': 'Q1:ChatGPT 與 Gemini Pro 都可以直接利用 Gmail 帳號登入, 初級應用目前都可免費使用, 這兩個 AI 工具可以協助我們解決甚麼問題? Q2:為什麼有人驚這些工具為天人? 有人卻覺得還好而已, 並無法從中挖出甚麼資料? Q3:AI 工具曾經協助我們解決甚麼問題?', 'tags': '', 'url': 'AI 工具.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};