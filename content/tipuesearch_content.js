var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁: 請填入目前網站所在的 URL,  https://mde.tw/cmsimde_site \n 網誌: 請填入目前網站所在的 URL/blog,  https://mde.tw/cmsimde_site/blog \n 簡報: 請填入目前網站所在的 URL/reveal,  https://mde.tw/cmsimde_site/reveal \n 倉儲:\xa0 https://github.com/41223134/wcm2024 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Codespaces', 'text': 'https://41223134.github.io/wcm2024 \n', 'tags': '', 'url': 'Codespaces.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'w6', 'text': '從與ChatGPT的對話認識Git \n 問題一:Git 的發展歷史 \n \n \n \n Git 是一個分散式版本控制系統，由林納斯·托瓦茲（Linus Torvalds）在2005年創建。這是為了幫助管理 Linux 內核開發而開發的。以下是 Git 的發展歷史： \n \n \n 2005 年 ：林納斯·托瓦茲創建了 Git。他最初是為了解決 Linux 內核開發過程中遇到的版本控制問題而創建的。Git 的設計目標是速度、數據完整性和分布式性。 \n \n \n 2005 年 4 月 ：Git 開始在 Linux 內核開發中使用。 \n \n \n 2005 年 7 月 ：Git 1.0 版本發布，正式公開發布。 \n \n \n 2008 年 ：GitHub 成立。GitHub 是一個基於 Git 的代碼託管平台，它大大推動了 Git 的普及和使用。 \n \n \n 2013 年 ：Git 2.0 版本發布。這是一個重要的版本，引入了一些重大變化和改進，包括重新設計的子模組命令和優化的日誌顯示。 \n \n \n 2016 年 ：Git 2.10 版本發布。這個版本包括了對 Windows 平台的改進和增強，以及其他一些改進。 \n \n \n 2018 年 ：Git 2.19 版本發布。這個版本引入了一些重要的性能改進和安全改進，並修復了一些漏洞。 \n \n \n 2020 年 ：Git 2.26 版本發布。這個版本引入了一個新的條件配置項，使得 Git 在某些情況下更加靈活。 \n \n \n 2021 年 ：Git 2.32 版本發布。這個版本包括了一些新特性、改進和修復。 \n \n \n Git 自發布以來一直在不斷發展，成為了最流行的版本控制系統之一，被廣泛應用於軟體開發領域。 \n 問題二:git創作人的相關履歷 \n \n \n \n Git 的創作人是林納斯·托瓦茲（Linus Torvalds），他是著名的芬蘭計算機科學家和軟體工程師。以下是他的一些相關履歷： \n \n \n Linux 內核 ：林納斯·托瓦茲最著名的貢獻是 Linux 操作系統的創建。在 1991 年，當時還是赫爾辛基大學的學生時，他開始編寫 Linux 內核，並將其作為開源項目發布。他的這一舉動奠定了現代開源運動的基礎，並成為了後來許多開源專案的靈感來源。 \n \n \n Git 版本控制系統 ：林納斯·托瓦茲在 2005 年創建了 Git，這是一個分散式版本控制系統，最初是為了解決 Linux 內核開發中的版本管理問題。Git 的成功使他成為了開源社區的領袖之一，並為他贏得了廣泛的讚譽和尊重。 \n \n \n 開源領袖 ：由於他在 Linux 和 Git 項目中的領導地位和卓越貢獻，林納斯·托瓦茲被認為是開源運動的重要人物之一。他的工作促進了開源軟體的發展和普及，並為全球開發者社區帶來了無數的機會和收益。 \n \n \n 獎項和榮譽 ：由於他在計算機科學和開源社區的貢獻，林納斯·托瓦茲贏得了許多獎項和榮譽，包括 ACM 軟體系統獎、IEEE 計算機學會編程語言成就獎等。 \n \n \n 總的來說，林納斯·托瓦茲是一位極具影響力的計算機科學家和開源社區的領袖，他的創作和貢獻對整個軟體行業產生了深遠的影響。 \n 問題三:能如何運用git解決solidworks製圖相關問題 \n \n \n \n Git 是一個優秀的版本控制系統，雖然它最初是針對軟體開發的，但也可以應用於其他領域，包括工程和製造。SolidWorks 是一款流行的電腦輔助設計（CAD）軟體，用於製造業中的產品設計和工程。以下是一些如何運用 Git 解決 SolidWorks 製圖相關問題的建議： \n \n \n 版本控制 ：SolidWorks 專案通常包含多個檔案，包括零件文件、組裝文件和圖紙文件等。使用 Git 可以將這些文件存儲在一個統一的存儲庫中，並跟踪它們的歷史版本。這使得團隊成員可以方便地共享、查看和回溯到不同版本的設計。 \n \n \n 協作 ：多人協作是設計工程中的常見需求。使用 Git，團隊成員可以同時在不同的分支上工作，每個人可以獨立地進行修改和測試，然後將其合併回主分支中。這樣可以減少衝突，提高團隊的效率。 \n \n \n 分支管理 ：SolidWorks 項目可能包含多個不同的分支，例如開發分支、功能分支、修復分支等。使用 Git 可以輕鬆地管理這些分支，並在需要時進行合併或切換。 \n \n \n 備份和復原 ：SolidWorks 文件可能會遇到意外的損壞或錯誤，使用 Git 可以定期備份文件並輕鬆地恢復到之前的版本。這樣可以保護設計文件免受意外損失的影響。 \n \n \n 代碼審查 ：Git 提供了強大的代碼審查功能，團隊成員可以在提交代碼之前輕鬆地進行審查和討論。這有助於提高代碼的質量和可靠性。 \n \n \n 總的來說，雖然 Git 不是專門針對 SolidWorks 製圖的工具，但它提供了一個有效的方式來管理和協作設計文件，並可以解決許多與版本控制和團隊協作相關的問題。 \n 問題四:要在 Windows 實際 demo git client 與 git server, 該如何進行? \n 要在 Windows 上實際進行 Git 客戶端（client）和 Git 伺服器（server）的演示，您需要以下步驟： \n \n \n 安裝 Git： \n \n 首先，您需要在 Windows 上安裝 Git。您可以從 Git 官方網站（ https://git-scm.com/）下載  Git 的安裝程式。 \n 下載後運行安裝程式，按照提示進行安裝。在安裝過程中，您可以選擇安裝 Git Bash（一個在 Windows 上運行的命令行界面）和 Git GUI（圖形用戶界面）等組件。 \n \n \n \n 設置 Git 用戶名和郵箱： \n \n 安裝完成後，在命令行中打開 Git Bash。 \n 使用以下命令設置您的 Git 用戶名和郵箱： \n \n git config --global user.name "Your Name"\ngit config --global user.email "your.email@example.com" \n \n \n \n \n \n \n \n 設置 Git 伺服器： \n \n 您可以在 Windows 上設置本地 Git 伺服器，以進行演示。最簡單的方法是使用 Git 的內建伺服器。 \n 在命令行中，進入您想要共享的存儲庫所在的目錄，然後執行以下命令來初始化一個空的 Git 存儲庫： \n \n git init --bare server-repo.git \n \n 這將在您的當前目錄中創建一個名為  server-repo.git  的空存儲庫。 \n \n \n \n 設置 Git 客戶端： \n \n 在 Windows 上，您可以使用 Git GUI 或命令行界面來操作 Git 客戶端。您可以在任何想要工作的目錄中初始化一個新的存儲庫，或者將現有的存儲庫克隆到本地。 \n 使用 Git Bash 或其他命令行工具，進入您想要初始化或克隆存儲庫的目錄，然後執行以下命令：\n \n \n git clone /path/to/your/server-repo.git \n \n \n \n 這將在您的當前目錄中創建一個名為  server-repo  的目錄，並將伺服器上的存儲庫克隆到本地。 \n \n \n \n \n \n \n 進行演示： \n \n 現在，您可以在本地存儲庫中進行任何 Git 操作，例如添加文件 git add 、提交更改 git commit 、推送到伺服器 git push 、將更新拉取到本地 git pull 等。 \n 您可以使用 Git GUI 或命令行工具來進行這些操作，並觀察其在 Git 伺服器上的效果。 \n \n \n \n 通過以上步驟，您可以在 Windows 上演示 Git 客戶端和伺服器的基本操作，以及它們之間的交互作用。 \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};